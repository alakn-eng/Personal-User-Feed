# Turso Database Configuration
# Get these from: https://turso.tech
# 1. Sign up at turso.tech
# 2. Create a database: turso db create curators-desk
# 3. Get URL: turso db show curators-desk --url
# 4. Create token: turso db tokens create curators-desk
TURSO_DATABASE_URL=libsql://your-database.turso.io
TURSO_AUTH_TOKEN=your-turso-auth-token-here

# Google OAuth Configuration
# Get these from: https://console.cloud.google.com/apis/credentials
# 1. Create a new project or select existing one
# 2. Enable YouTube Data API v3
# 3. Create OAuth 2.0 credentials
# 4. Add http://localhost:3000/auth/youtube/callback as authorized redirect URI
GOOGLE_CLIENT_ID=your-client-id-here.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-client-secret-here
GOOGLE_REDIRECT_URI=http://localhost:3000/auth/youtube/callback

# Magic.link Authentication Configuration
# Get these from: https://magic.link/dashboard
# Sign up and create a new app to get your keys
MAGIC_SECRET_KEY=sk_live_your-secret-key-here
MAGIC_PUBLISHABLE_KEY=pk_live_your-publishable-key-here

# Session Configuration
SESSION_SECRET=change-this-to-a-random-string-in-production

# Server Configuration
PORT=3000
NODE_ENV=development

# Gmail Integration (Feature: FEATURE_GMAIL_INGEST)
# Enable/disable Gmail ingestion feature
FEATURE_GMAIL_INGEST=off

# Gmail OAuth Configuration
# Uses same GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET as YouTube
# Add http://localhost:3000/integrations/gmail/callback as authorized redirect URI in Google Console
GOOGLE_GMAIL_REDIRECT_URI=http://localhost:3000/integrations/gmail/callback

# Encryption key for storing OAuth tokens (REQUIRED for Gmail feature)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef

# Mock Gmail data (for development/testing)
# Set to "on" to use dev-fixtures/substack-sample.json instead of real Gmail API
MOCK_GMAIL=off
